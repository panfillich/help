<?php
/*Identity Map
Identity Map - это паттерн, который дает возможность загрузить лишь один экземпляр объекта в память. 
То есть, если при первом обращении к определенному объекту ORM "поднимает" экземпляр этого объекта из базы, 
но все последующие запросы, которые будут приводить к получению этого объекта (даже если этот объект будет 
частью списка других объектов), будут всего лишь получать ссылку на уже созданный объект, а не его копию. 
Работает это благодаря тому, что внутри ядра ORM есть реализация этого паттерна. Контекст/сессия, перед тем, 
как материализовать (создать) объект с определенным Id, сначала просматривают это хранилище на предмет существования 
объекта, и если он не найден, регистрируют новый материализованный объект в хранилище.

Что это нам дает, как программистам. Прежде всего, если мы работаем с одним и тем же контекстом/сессией, 
то мы можем легко сравнивать объекты по ссылке (==). Кроме того, и что более важно, если мы уже начали изменять 
объект, а потом вдруг он появился в результате какой-то вспомогательной выборки, то мы можем быть уверены, 
что это один и тот же измененный объект (конечно, если вы напрямую не сказали при выборке, что вам необходим 
"чистый" объект). Ну, и напоследок, как side effect, мы получаем небольшое кеширование в рамках контекста/сессии, 
что позволяет уменьшить затраты на повторную материализацию объекта (весьма немаленькие). Естесственно, объекты, 
полученные из разных конекстов/сессий, не обладают подобными свойствами, что также необходимо понимать и учитывать.
*/

//В ларавеле его нет
class User extends Eloquent {}

$user1 = User::findOrFail(1);
$user2 = User::findOrFail(1);

print_r($user1 === $user2); // false

//Что есть в Laravel
//Паттерны Laravel:
//DI (Dependency Injection)
//Repository
//Observable
//Singleton
//Facade
//Factory
//Iterator