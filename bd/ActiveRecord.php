<?php
//Active record (AR) — шаблон проектирования приложений, описанный Мартином Фаулером в книге 
//Patterns of Enterprise Application Architecture («Шаблоны архитектуры корпоративных приложений»). 
//AR является популярным способом доступа к данным реляционных баз данных в объектно-ориентированном 
//программировании.

//Active record - активная запись.

//Общий принцип работы Active Record
//Пусть существует таблица в базе данных. Для данной таблицы создаётся специальный класс AR, 
//являющийся отражением (представлением) таблицы, таким образом, что:

    // - каждый экземпляр данного класса соответствует одной записи таблицы;
    // - при создании нового экземпляра класса (и заполнении соответствующих полей) в таблицу добавляется новая запись;
    // - при чтении полей объекта считываются соответствующие значения записи таблицы баз данных;
    // - при изменении (удалении) какого-либо объекта изменяется (удаляется) соответствующая ему запись.
	
//При использовании Active record методы для сохранения/загрузки сущности из БД добавляются прямо в 
//нее. Чтобы не копипастить их в каждый класс, их обычно добавляют в базовый класс, а сущность наследуют от него. 
//При этом обычно в сущности делается метод, возвращающий информацию о соответствии полей объекта таблице и полям 
//в базе данных (чтобы можно было правильно составить SQL запрос): 	

class Foo
{
    protected $db;
    public $id;
    public $bar;
     
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }
 
    public function save()
    {
        if ($this->id) {
            $sql = "UPDATE foo SET bar = :bar WHERE id = :id";
            $statement = $this->db->prepare($sql);
            $statement->bindParam("bar", $this->bar);
            $statement->bindParam("id", $this->id);
            $statement->execute();
        }
        else {
            $sql = "INSERT INTO foo (bar) VALUES (:bar)";
            $statement = $this->db->prepare($sql);
            $statement->bindParam("bar", $this->bar);
            $statement->execute();
            $this->id = $this->db->lastInsertId();
        }
    }
}
 
//Insert
$foo = new Foo($db);
$foo->bar = 'baz';
$foo->save();
	
/*Преимущества Active Record

    Писать код с Active Record получается быстро и легко, в том случае, когда свойства объекта прямо соотносятся с колонками в базе данных.
    Сохранение происходит в одном месте, что позволяет легко изучить, как это работает.


Недостатки Active Record

    Модели Active Record нарушаю принципы SOLID. В частности, принцип единой ответственности (SRP — «S» в принципах SOLID). Согласно принципу, доменный объект должен иметь только одну зону ответственности, то есть только свою бизнес-логику. Вызывая его для сохранения данных, вы добавляете ему дополнительную зону ответственности, увеличивая сложность объекта, что усложняет его поддержку и тестирование.
    Реализации сохранения данных тесно связана с бизнес-логикой, а это означает, что если вы позже захотите использовать другую абстракцию для сохранения данных (например для хранения данных в XML-файле, а не в базе данных), то вам придется делать рефакторинг кода.
*/
