Можно встретить две разновидности написания для этого архитектурного стиля программирования: REST и RESTful, 
отличия в значениях этих терминов нет, просто RESTful это прилагательное от REST, 
т. е. RESTful API — это API, отвечающее принципам REST.

REST (сокр. от англ. Representational State Transfer — «передача состояния представления») 
REST — это стиль архитектуры программного обеспечения для построения распределенных 
масштабируемых веб-сервисов. 

API
интерфейс программирования приложений, интерфейс прикладного программирования
англ. application programming interface, API [эй-пи-ай][1] 
По сути это набор готовых классов, процедур, функций, структур и констант, предоставляемых приложением 
(библиотекой, сервисом) или операционной системой для использования во внешних программных продуктах. 
Используется программистами при написании всевозможных приложений.

REST
данные HTTP-запросы будут иметь различный смысловую нагрузку в REST:
    GET /object/list
    POST /object/list
    PUT /object/list

	1) Архитектура, клиент — сервер. 
	Отделяем логику приложения от различных клиентов, делаем их код более переносимым, 
	а структуру сервера более простой и масштабируемой. Разработка клиентов и сервера 
	может вестись совершенно независимо. 
	
	2)Кэширование
	
	3)Отсутствие состояния
	Серверы не связаны с интерфейсами клиентов и их состояниями. На стороне сервера 
	не сохраняется пользовательский контекст между двумя разными запросами. 
	Каждый запрос содержит всю информацию, необходимую обработчику, а состояние сессии хранится на клиенте. 
	Состояние сессии может быть передано сервером на другой сервис благодаря поддержке постоянного состояния 
	базой данных[уточнить]. Клиент отсылает запросы, когда готов совершить транзакцию на изменение состояния.
	Никаких запросов к куке, к сессии от сервера.
	
	4)Слои
	Клиент может взаимодействовать не напрямую с сервером, а через промежуточные узлы (слои). 
	При этом клиент может не знать об их существовании, за исключением случаев передачи конфиденциальной информации.
	[10] Промежуточные серверы выполняют балансировку нагрузки и могут использовать дополнительное кэширование.
	[10] Промежуточные серверы выполняют балансировку нагрузки и могут использовать дополнительное кэширование.
	
	5)Единообразие интерфейса
	Ограничения на унифицированный интерфейс являются фундаментальными в дизайне REST-сервисов. 
	Каждый из сервисов функционирует и развивается независимо. Ограничения для унификации интерфейса[7][8]:

		5.1)Идентификация ресурсов. 
		Индивидуальные ресурсы идентифицированы в запросах, например, с использованием URI в интернет-системах. 
		Ресурсы сами по себе отделены от представлений, которые возвращаются клиентам. Например, сервер может 
		отсылать данные из базы данных в виде HTML, XML или JSON, ни один из которых не является типом хранения 
		внутри хранилища сервера.
		
		5.2) Манипуляция ресурсами через представление. 
		В момент, когда клиенты хранят представление ресурса, включая метаданные, они имеют достаточно данных 
		для модификации или удаления ресурса.
		
		5.3)«Самодостаточные» сообщения. Каждое сообщение достаточно информативно для того, чтобы описать каким образом его обрабатывать. 
		К примеру, какой парсер необходимо применить для извлечения данных из сообщения согласно Internet медиа-типу.[9]
    
		5.4)Гипермедиа, как средство изменения состояния сервера. Клиенты могут изменить состояние системы только через действия, 
		которые динамически идентифицируются на сервере посредством гипермедиа (к примеру, гиперссылки в гипертексте, формы связи, 
		флажки, радиокнопки и прочее). До того момента, пока сервер в явном виде не сообщит обратное, клиенты могут полагаться на то, 
		что любое из предоставленных действий доступно для выполнения на сервере.
